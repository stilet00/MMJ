---
import Layout from "../layouts/Layout.astro";
import background from "../assets/background.svg";

// Импортим все JPG из папки assets (eager чтобы сразу получить URL)
const modules = import.meta.glob("../assets/*.jpg", { eager: true, as: "url" });

// Собираем массив { number, title, src }
const images = Object.entries(modules)
	.map(([path, url]) => {
		const file = path.split("/").pop(); // e.g. "17-Calavera.jpg"
		const name = file?.replace(/\.jpg$/, ""); // "17-Calavera"
		const [number, rawTitle] = name?.split("-", 2) ?? ["", ""]; // ["17", "Calavera"]
		const title = rawTitle.replace(/_/g, " "); // на случай пробелов-черточек
		return { number, title, src: url };
	})
	.sort((a, b) => Number(a.number) - Number(b.number));
---

<Layout>
  <img id="background" src={background.src} alt="" fetchpriority="high" />
  <div class="search-container">
    <input id="search" type="text" placeholder="По номеру…" />
  </div>

  <div id="gallery">
    {images.map(image => (
      <div class="image-card" data-number={image.number}>
        <img src={image.src} alt={`#${image.number} — ${image.title}`} />
        <p>#{image.number} — {image.title}</p>
      </div>
    ))}
  </div>

  <script is:inline client:load>
    const input = document.getElementById('search');
    const cards = document.querySelectorAll('.image-card');
    input.addEventListener('input', () => {
      const q = input.value.trim();
      cards.forEach(card => {
        const num = card.dataset.number;
        card.style.display = num.includes(q) ? '' : 'none';
      });
    });
  </script>
</Layout>


<style>
	#background {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -1;
		filter: blur(100px);
	}

	/* фон и прочие глобалки оставляем без изменений… */

.search-container {
  display: flex;
  justify-content: center;
  margin: 2rem 0 1rem;
  padding: 0 1.5rem 2rem;
}
#search {
  width: 100%;
  max-width: 360px;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  border-radius: 9999px;
  border: 2px solid rgba(0,0,0,0.1);
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  transition: border-color 0.2s, box-shadow 0.2s;
}
#search:focus {
  outline: none;
  border-color: #6b46c1;
  box-shadow: 0 4px 12px rgba(107,70,193,0.2);
}

/* responsive gallery */
#gallery {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 1.5rem;
  padding: 0 1.5rem 2rem;
}
.image-card {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0,0,0,0.05);
  text-align: center;
  transition: transform 0.2s, box-shadow 0.2s;
}
.image-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 6px 20px rgba(0,0,0,0.08);
}
.image-card img {
  width: 100%;
  height: auto;
  display: block;
}
.image-card p {
  margin: 0.5rem 0 1rem;
  font-weight: 500;
  color: #333;
}

/* mobile tweaks */
@media (max-width: 480px) {
  #search {
    max-width: 95%;
  }
  #gallery {
    gap: 1rem;
    padding: 0 1rem 1.5rem;
  }
  .search-container {
	padding: 0 1rem 1.5rem;
  }
}

</style>